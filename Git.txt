Git教程网址：https://www.liaoxuefeng.com/
Git仓库// https://github.com/LvDaYX/
Github之SSH Key的创建与配置：//http://blog.csdn.net/superxlcr/article/details/51354257
ssh.key === id_rsa.pub

//生成新的ssh key 并添加到ssh-agent：

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"  //生成新的Ssh Key


//设置ssh key 密码

Enter passphrase (empty for no passphrase): [Type a passphrase]  

//添加ssh到ssh-agent
//1 保证ssh-agent已启用
eval "$(ssh-agent -s)"
//2添加
ssh -add ~/.ssh/id_rsa 

//设置GitHub
//1将id_rsa.pub复制到剪贴板
clip < ~/.ssh/id_rsa.pub
//2
在github右上角点击setting：
在左边选择SSH and GPG keys：
点击New SSH key：
在Title处为你的ssh key填入适当的标题，在Key处粘贴你复制的ssh key
点击Add SSH key：
输入你的github账号密码确认此次行动

//Changing remote's URL (改变远程仓库的URL)
//1查看拥有的远程仓库
   git remote -v

//2更改远程仓库的URL
   git remote set-url origin https://github.com/github name/repository.git

//3查看是否修改成功
   git remote -v


Linux：
sudo apt-get install git

Windows：
Git官网
tortoise官网下载

tortoiseGit-2.5.0.0
tortoiseGit-languagePack
Git-2.15.1.2

git config --global user.name "Your Name"   //绑定用户名
git config --global user.email "email@example.com"  //绑定用户邮箱

//创建版本库
git init // 创建仓库
git add file.txt // 添加文件到暂存区
git commit -m " 更改信息" //提交添加暂存区文件到分支

//工作区和暂存区和版本回退
git log （--pretty=oneline）// 查看历史记录
git reset --hard HEAD^ // 退回上一个版本 HEAD表示当前版本 ^表示前一版本 ^^表示前面的两个版本
git reflog // 查看命令历史记录
git status // 查看状态

 ―工作区―          -版本库-----------------------------
|          |        |    _____      HEAD    ______       |
|  __      |        |  _|stage|_          _|master|__    |
| |__|     |        | |         |        |           |   |
|  |       |  add   | |         |        |           |   |
|  |_   ---|--------|-|--->     |        |           |   |
|  |       |        | |   __    |        |     __    |   |
|  |_      |        | |  |__|   | commit |    |__|   |   |
|  |       |        | |   |    -|--------|- >  |     |   |
|          |        | |   |_    |        |     |―   |   |
|          |        | |   |     |        |     |     |   |
|          |        | |   |_    |        |     |―   |   |
|          |        | |   |     |        |     |     |   |
|          |        | |_________|        |___________|   |
|__________|        |____________________________________|                 |           |   |


//管理修改
git diff HEAD -- file //查看工作区和版本库里面最新版本的区别


//撤销修改
git checkout -- file //把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。

git reset HEAD file //git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。


场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


git rm file // 用于删除一个文件 。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心你只能回复文件到最新版本，你会丢失最近一次提交后你修改的内容


//添加远程库
1、首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库

2、在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：

3、目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。

4、我们根据GitHub的提示，在本地的learngit仓库下运行命令：
   git remote add origin git@github.com:michaelliao/learngit.git

   请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。
   添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。

5、把本地库的所有内容推送到远程库上：
   git push -u origin master
   把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：

6、只要本地作了提交，就可以通过命令：
   git push origin master 

//克隆远程仓库
  git clone git@github.com:LvDaYX/repository.git

//分支管理
1、创建分支然后切换到Dev分支
  git checkout -b Dev

  git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
  git branch dev     //创建分支
  git checkout dev   //切换分支
 //查看当前分支命令：git branch命令会列出所有分支，当前分支前面会标一个*号
   git branch
   * Dev
   master

2、把dev分支的工作成果合并到master分支上：
   git merge dev

总结：
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>








